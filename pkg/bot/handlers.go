package bot

import (
	"emelyanenkoig/reminder/pkg/models"
	"fmt"
	"gopkg.in/telebot.v3"
	"log"
	"time"
)

type UserState struct {
	State      string
	DateTime   string
	Title      string
	ReminderID int
}

const (
	StateCreatingTitle = "creating_title"
	StateSettingDate   = "setting_date"
	StateSettingTime   = "setting_time"
)

func (b *Bot) HandleStart() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		userID := uint(c.Sender().ID)
		newUser := &models.User{
			ID:        userID,
			Username:  c.Sender().Username,
			Reminders: make([]models.Reminder, 0),
		}

		err := b.userService.CreateUser(newUser)
		if err != nil {
			log.Println("Error creating user:", err)
			return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error())
		}

		return c.Send(fmt.Sprintf("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: %s.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", newUser.Username))
	}
}

func (b *Bot) HandleGetUser() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		userID := uint(c.Sender().ID)

		user, err := b.userService.GetUserByID(userID)
		if err != nil {
			log.Println("Error getting user:", err)
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		userInfo := fmt.Sprintf("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %d", user.ID, user.Username, len(user.Reminders))
		return c.Send(userInfo)
	}
}

func (b *Bot) HandleAddReminder() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		b.userStates[c.Chat().ID] = &UserState{State: StateCreatingTitle}
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
	}
}

func (b *Bot) HandleText() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		chatID := c.Chat().ID
		userID := uint(c.Sender().ID)
		userState, ok := b.userStates[chatID]
		if !ok {
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_reminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
		}

		switch userState.State {
		case StateCreatingTitle:
			userState.Title = c.Text()
			userState.State = StateSettingDate
			return c.Send("–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", &telebot.ReplyMarkup{
				InlineKeyboard: [][]telebot.InlineButton{
					{{Text: "–°–µ–≥–æ–¥–Ω—è", Data: "today"}, {Text: "–ó–∞–≤—Ç—Ä–∞", Data: "tomorrow"}, {Text: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", Data: "set_date"}},
				},
			})
		case StateSettingDate:
			dateStr := c.Text()
			_, err := time.Parse("2006-01-02", dateStr)
			if err != nil {
				return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
			}
			userState.DateTime = dateStr
			userState.State = StateSettingTime
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ.", &telebot.ReplyMarkup{
				InlineKeyboard: [][]telebot.InlineButton{
					{{Text: "üåÖ 09:00", Data: "09:00"}, {Text: "‚òÄÔ∏è 12:00", Data: "12:00"}, {Text: "‚òÄÔ∏è 15:00", Data: "15:00"}, {Text: "üåÜ 18:00", Data: "18:00"}},
				},
			})
		case StateSettingTime:
			newTimeStr := c.Text()
			_, err := time.Parse("15:04", newTimeStr)
			if err != nil {
				return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
			}
			userState.DateTime = fmt.Sprintf("%s %s", userState.DateTime, newTimeStr)

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ –≤—Ä–µ–º—è –≤ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
			dueDateTime, err := time.ParseInLocation("2006-01-02 15:04", userState.DateTime, time.Local)
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
			}

			reminder := &models.Reminder{
				UserID:  userID,
				Title:   userState.Title,
				DueDate: dueDateTime,
			}

			err = b.reminderService.CreateReminder(reminder)
			if err != nil {
				log.Println("Error creating reminder:", err)
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + err.Error())
			}

			// –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
			b.scheduleReminder(reminder)

			delete(b.userStates, chatID)
			return c.Send(fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–î–∞—Ç–∞: %s", reminder.Title, reminder.DueDate.Format("2006-01-02 15:04")))
		default:
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_reminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
		}
	}
}

func (b *Bot) HandleCallback() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		chatID := c.Chat().ID
		data := c.Callback().Data

		if data == "" {
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}

		userState, ok := b.userStates[chatID]
		if !ok {
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_reminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
		}

		switch userState.State {
		case StateSettingDate:
			var dateStr string
			switch data {
			case "today":
				dateStr = time.Now().Format("2006-01-02")
			case "tomorrow":
				dateStr = time.Now().AddDate(0, 0, 1).Format("2006-01-02")
			case "set_date":
				userState.State = StateSettingDate
				return c.Send("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î).")
			default:
				return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			}
			userState.DateTime = dateStr
			userState.State = StateSettingTime
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ.", &telebot.ReplyMarkup{
				InlineKeyboard: [][]telebot.InlineButton{
					{{Text: "üåÖ 09:00", Data: "09:00"}, {Text: "‚òÄÔ∏è 12:00", Data: "12:00"}, {Text: "‚òÄÔ∏è 15:00", Data: "15:00"}, {Text: "üåÜ 18:00", Data: "18:00"}},
				},
			})
		case StateSettingTime:
			newTimeStr := data
			_, err := time.Parse("15:04", newTimeStr)
			if err != nil {
				return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
			}
			userState.DateTime = fmt.Sprintf("%s %s", userState.DateTime, newTimeStr)

			dueDateTime, err := time.ParseInLocation("2006-01-02 15:04", userState.DateTime, time.UTC)
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
			}

			reminder := &models.Reminder{
				UserID:  uint(c.Sender().ID),
				Title:   userState.Title,
				DueDate: dueDateTime,
			}

			err = b.reminderService.CreateReminder(reminder)
			if err != nil {
				log.Println("Error creating reminder:", err)
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + err.Error())
			}

			// –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
			b.scheduleReminder(reminder)

			delete(b.userStates, chatID)
			return c.Send(fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–î–∞—Ç–∞: %s", reminder.Title, reminder.DueDate.Format("2006-01-02 15:04")))
		default:
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_reminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_reminders
func (b *Bot) HandleListReminders() telebot.HandlerFunc {
	return func(c telebot.Context) error {
		userID := uint(c.Sender().ID)

		user, err := b.userService.GetUserByID(userID)
		if err != nil {
			log.Println("Error getting user:", err)
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		if len(user.Reminders) == 0 {
			return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
		}

		var remindersList string
		for _, reminder := range user.Reminders {
			remindersList += fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s\n\n", reminder.Title, reminder.DueDate.Format("2006-01-02 15:04"))
		}

		return c.Send(remindersList)
	}
}

func (b *Bot) sendReminder(reminder *models.Reminder) {
	message := fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s", reminder.Title, reminder.DueDate.In(time.Local).Format("2006-01-02 15:04"))
	chatID := int64(reminder.UserID)

	_, err := b.Bot.Send(&telebot.Chat{ID: chatID}, message)
	if err != nil {
		log.Println("Error sending reminder:", err)
	}
}

func (b *Bot) scheduleReminder(reminder *models.Reminder) {
	duration := time.Until(reminder.DueDate)
	if duration <= 0 {
		log.Println("Reminder time is in the past")
		return
	}

	time.AfterFunc(duration, func() {
		b.sendReminder(reminder)
	})
}
